[
  "<description><summary>auth(n: number = 0, m: number = 1, creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false)</summary>\n\n<p>The first <code>n</code> (default: all) characters of the <code>m</code>th (default: first) author's last name.</p></description>\n",
  "<description><summary>authAuthEa(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39;.&#39;)</summary>\n\n<p>The last name of the first two authors, and \".ea\" if there are more than two.</p></description>\n",
  "<description><summary>authEtAl(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39; &#39;)</summary>\n\n<p>The last name of the first author, and the last name of the\nsecond author if there are two authors or \"EtAl\" if there are\nmore than two. This is similar to <code>auth.etal</code>. The difference\nis that the authors are not separated by \".\" and in case of\nmore than 2 authors \"EtAl\" instead of \".etal\" is appended.</p></description>\n",
  "<description><summary>authEtal2(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39;.&#39;)</summary>\n\n<p>The last name of the first author, and the last name of the second author if there are two authors or \".etal\" if there are more than two.</p></description>\n",
  "<description><summary>authForeIni(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;)</summary>\n\n<p>The given-name initial of the first author.</p></description>\n",
  "<description><summary>authIni(n: number = 0, creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39;.&#39;)</summary>\n\n<p>The beginning of each author's last name, using no more than <code>n</code> characters (0 = all).</p></description>\n",
  "<description><summary>authorIni(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39;.&#39;)</summary>\n\n<p>The first 5 characters of the first author's last name, and the last name initials of the remaining authors.</p></description>\n",
  "<description><summary>authorLast(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false)</summary>\n\n<p>The last name of the last author</p></description>\n",
  "<description><summary>authorLastForeIni(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;)</summary>\n\n<p>The given-name initial of the last author.</p></description>\n",
  "<description><summary>authorsAlpha(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39; &#39;)</summary>\n\n<p>Corresponds to the BibTeX style \"alpha\". One author: First three letters of the last name. Two to four authors: First letters of last names concatenated.\nMore than four authors: First letters of last names of first three authors concatenated. \"+\" at the end.</p></description>\n",
  "<description><summary>authorsn(n: number = 0, creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39; &#39;)</summary>\n\n<p>The last names of the first <code>n</code> (default: all) authors.</p></description>\n",
  "<description><summary>authshort(creator: (&quot;author&quot; | &quot;editor&quot; | &quot;translator&quot; | &quot;collaborator&quot; | &quot;*&quot;) = &#39;*&#39;, initials: boolean = false, sep: string = &#39;.&#39;)</summary>\n\n<p>The last name if one author/editor is given; the first character\nof up to three authors' last names if more than one author is\ngiven. A plus character is added, if there are more than three\nauthors.</p></description>\n",
  "<description><summary>creators(n: (number | [ number,number ]) = 0, type: (&quot;*&quot; | Creator | Creator[] | (Creator | &quot;*&quot;)[][]) = [[&#39;primary&#39;, &#39;editor&#39;, &#39;translator&#39;, &#39;*&#39;]], name: &#96;sprintf-style format template&#96; = &#39;%(f)s&#39;, etal: string = &#39;&#39;, sep: string = &#39; &#39;, min: number = 0, max: number = 0)</summary>\n\n<p>Author/editor information.</p>\n<p>Creator is one of: artist, attorneyAgent, author, bookAuthor, cartographer, castMember, commenter, composer, contributor, cosponsor, counsel, director, editor, guest, interviewee, interviewer, inventor, performer, podcaster, presenter, producer, programmer, recipient, reviewedAuthor, scriptwriter, seriesEditor, sponsor, translator, wordsBy</p></description>\n",
  "<description><summary>creatortypes(match?: RegExp)</summary>\n\n<p>This will return a comma-separated list of creator type information for all creators on the item\nin the form <code>&lt;1 or 2&gt;&lt;creator-type&gt;</code>, where <code>1</code> or <code>2</code> denotes a 1-part or 2-part creator, and <code>creator-type</code> is one of {{% citekey-formatters/creatortypes %}}, or <code>primary</code> for\nthe primary creator-type of the Zotero item under consideration. The list is prefixed by the item type, so might look like <code>audioRecording:2performer,2performer,1composer</code>.</p></description>\n",
  "<description><summary>date(format: string = &#39;%Y-%m-%d&#39;)</summary>\n\n<p>The date of the publication</p></description>\n",
  "<description><summary>extra(variable: string)</summary>\n\n<p>A pseudo-field from the extra field. eg if you have <code>Original date: 1970</code> in your <code>extra</code> field, you can get it as\n<code>extra(originalDate)</code>, or <code>tex.shortauthor: APA</code> which you could\nget with <code>extra('tex.shortauthor')</code>. Any <code>tex.</code> field will be\npicked up, the other fields can be selected from <a href=\"https://retorque.re/zotero-better-bibtex/exporting/extra-fields/\">this list</a>\nof key names.</p></description>\n",
  "<description><summary>field(name: string)</summary>\n\n<p>Gets the value of the item field</p></description>\n",
  "<description><summary>firstpage()</summary>\n\n<p>The number of the first page of the publication (Caution: this\nwill return the lowest number found in the pages field, since\nBibTeX allows <code>7,41,73--97</code> or <code>43+</code>.)</p></description>\n",
  "<description><summary>group(name: string)</summary>\n\n<p>Tests whether the item is in the given group library</p></description>\n",
  "<description><summary>infix(format: string = &#39;%(a)s&#39;, start: number = 0)</summary>\n\n<p>a pseudo-function that sets the citekey disambiguation infix using an <a href=\"https://www.npmjs.com/package/sprintf-js\">sprintf-js</a> format spec\nfor when a key is generated that already exists. The infix charachter appears at the place of this function of the formula instead of at the and (as postfix does).\nYou <em>must</em> include <em>exactly one</em> of the placeholders <code>%(n)s</code> (number), <code>%(a)s</code> (alpha, lowercase) or <code>%(A)s</code> (alpha, uppercase).\nFor the rest of the disambiguator you can use things like padding and extra text as sprintf-js allows. With start set to <code>1</code> the disambiguator is always included,\neven if there is no need for it when no duplicates exist. The default  format is <code>%(a)s</code>.</p></description>\n",
  "<description><summary>inspireHep()</summary>\n\n<p>Fetches the key from inspire-hep based on DOI or arXiv ID</p></description>\n",
  "<description><summary>item(id: (&quot;key&quot; | &quot;id&quot;) = &#39;key&#39;)</summary>\n\n<p>returns the internal item ID/key</p></description>\n",
  "<description><summary>journal(abbrev: (&quot;off&quot; | &quot;abbrev&quot; | &quot;auto&quot; | &quot;abbrev+auto&quot; | &quot;full&quot;) = &#39;abbrev+auto&#39;)</summary>\n\n<p>returns the journal abbreviation, or, if not found, the journal title, If 'automatic journal abbreviation' is enabled in the BBT settings,\nit will use the same abbreviation filter Zotero uses in the wordprocessor integration. You might want to use the <code>abbr</code> filter on this.\nAbbreviation behavior can be specified as <code>abbrev+auto</code> (the default) which uses the explicit journal abbreviation if present, and tries the automatic\nabbreviator if not (if auto-abbrev is enabled in the preferences), <code>auto</code> (skip explicit journal abbreviation even if present), <code>abbrev</code>\n(no auto-abbrev even if it is enabled in the preferences) or <code>full</code>/<code>off</code> (no abbrevation).</p></description>\n",
  "<description><summary>keyword(n: number)</summary>\n\n<p>Tag number <code>n</code>. Mostly for legacy compatibility</p></description>\n",
  "<description><summary>language(...name: string[])</summary>\n\n<p>Tests whether the item has the given language set, and skips to the next pattern if not</p></description>\n",
  "<description><summary>lastpage()</summary>\n\n<p>The number of the last page of the publication (See the remark on <code>firstpage</code>)</p></description>\n",
  "<description><summary>library()</summary>\n\n<p>Tests whether the item is in the user library</p></description>\n",
  "<description><summary>month()</summary>\n\n<p>the month of the publication</p></description>\n",
  "<description><summary>origdate()</summary>\n\n<p>the original date of the publication</p></description>\n",
  "<description><summary>origyear()</summary>\n\n<p>the original year of the publication</p></description>\n",
  "<description><summary>postfix(format: &#96;sprintf-style format template&#96; = &#39;%(a)s&#39;, start: number = 0)</summary>\n\n<p>a pseudo-function that sets the citekey disambiguation postfix using an <a href=\"https://www.npmjs.com/package/sprintf-js\">sprintf-js</a> format spec\nfor when a key is generated that already exists. Does not add any text to the citekey otherwise.\nYou <em>must</em> include <em>exactly one</em> of the placeholders <code>%(n)s</code> (number), <code>%(a)s</code> (alpha, lowercase) or <code>%(A)s</code> (alpha, uppercase).\nFor the rest of the disambiguator you can use things like padding and extra text as sprintf-js allows. With start set to <code>1</code> the disambiguator is always included,\neven if there is no need for it when no duplicates exist. The default  format is <code>%(a)s</code>.</p></description>\n",
  "<description><summary>shorttitle(n: number = 3, m: number = 0)</summary>\n\n<p>The first <code>n</code> (default: 3) words of the title, apply capitalization to first <code>m</code> (default: 0) of those.</p></description>\n",
  "<description><summary>shortyear()</summary>\n\n<p>The last 2 digits of the publication year</p></description>\n",
  "<description><summary>title()</summary>\n\n<p>Capitalize all the significant words of the title, and concatenate them. For example, <code>An awesome paper on JabRef</code> will become <code>AnAwesomePaperJabref</code></p></description>\n",
  "<description><summary>type(...allowed: string[])</summary>\n\n<p>Without arguments, returns the item type.\nWhen arguments as passed, tests whether the item is of any of the given types, and skips to the next pattern if not, eg <code>type(book) + veryshorttitle | auth + year</code>.</p></description>\n",
  "<description><summary>veryshorttitle(n: number = 1, m: number = 0)</summary>\n\n<p>The first <code>n</code> words of the title, apply capitalization to first <code>m</code> of those</p></description>\n",
  "<description><summary>year()</summary>\n\n<p>The year of the publication</p></description>\n",
  "<description><summary>zotero()</summary>\n\n<p>Generates citation keys as the stock Zotero Bib(La)TeX export\ndoes. Note that this pattern inherits all the problems of the\noriginal Zotero citekey generation -- you should really only\nuse this if you have existing papers that rely on this behavior.</p></description>\n"
]