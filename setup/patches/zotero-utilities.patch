--- submodules/zotero-utilities/utilities.js
+++ submodules/zotero-utilities/utilities.js
@@ -118,68 +118,6 @@ var Utilities = {
 		};
 	},
 
-	sentenceCase: function (text) {
-		const preserve = [];
-		const allcaps = text === text.toUpperCase()
-
-		// sub-sentence start
-		text.replace(/([.?!][\s]+)(<[^>]+>)?([\p{Lu}])/ug, (match, end, markup, char, i) => {
-			markup = markup || "";
-			if (!text.substring(0, i + 1).match(/(\p{Lu}[.]){2,}$/u)) { // prevent "U.S. Taxes" from starting a new sub-sentence
-				preserve.push({ start: i + end.length + markup.length, end: i + end.length + markup.length + char.length });
-			}
-		});
-
-		// protect leading capital
-		text.replace(/^(<[^>]+>)?([\p{Lu}])/u, (match, markup, char) => {
-			markup = markup || "";
-			preserve.push({ start: markup.length, end: markup.length + char.length });
-		});
-
-		// protect nocase
-		text.replace(/<span class="nocase">.*?<\/span>|<nc>.*?<\/nc>/gi, (match, i) => {
-			preserve.push({ start: i, end: i + match.length, description: 'nocase' });
-		});
-
-		// mask html tags with characters so the sentence-casing can deal with them as simple words
-		let masked = text.replace(/<[^>]+>/g, (match, i) => {
-			preserve.push({ start: i, end: i + match.length, description: 'markup' });
-			return '\uFFFD'.repeat(match.length);
-		});
-
-		masked = masked
-			.replace(/[;:]\uFFFD*\s+\uFFFD*A\s/g, match => match.toLowerCase())
-			.replace(/[–—]\uFFFD*\s*\uFFFD*A\s/g, match => match.toLowerCase())
-			// words, compound words, and acronyms (latter also catches U.S.A.)
-			.replace(/([\u{FFFD}\p{L}\p{N}\p{No}]+([\u{FFFD}\p{L}\p{N}\p{No}\p{Pc}]*))|(\s(\p{Lu}+[.]){2,})?/ug, word => {
-				if (allcaps) return word.toLowerCase()
-
-				const unmasked = word.replace(/\uFFFD/g, '');
-
-				if (unmasked.length === 1) {
-					return unmasked === 'A' ? word.toLowerCase() : word
-				}
-
-				// inner capital somewhere
-				if (unmasked.match(/.\p{Lu}/u)) {
-					return word
-				}
-
-				// identifiers or allcaps
-				if (unmasked.match(/^\p{L}\p{L}*[\p{N}\p{No}][\p{L}\p{N}\p{No}]*$/u) || unmasked.match(/^[\p{Lu}\p{N}\p{No}]+$/u)) {
-					return word
-				}
-
-				return word.toLowerCase()
-			});
-
-		for (const { start, end } of preserve) {
-			masked = masked.substring(0, start) + text.substring(start, end) + masked.substring(end);
-		}
-
-		return masked;
-	},
-
 	/**
 	 * Fixes author name capitalization.
 	 * Splits names into space-separated parts and only changes parts either in all uppercase
