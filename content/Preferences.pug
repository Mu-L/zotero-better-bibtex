| <?xml version="1.0"?>
| <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
| <?xml-stylesheet href="chrome://global/skin/global.css"?>
| <?xml-stylesheet href="chrome://zotero-platform/content/preferences.css"?>
| <?xml-stylesheet href="chrome://browser/skin/preferences/preferences.css"?>
| <?xml-stylesheet href="chrome://zotero/skin/preferences.css"?>
| <?xml-stylesheet href="chrome://zotero/skin/zotero.css"?>
| <?xml-stylesheet href="chrome://zotero-platform/content/overlay.css"?>
| <?xml-stylesheet href="chrome://zotero-better-bibtex/skin/preferences.css"?>
| <?xml-stylesheet href="chrome://zotero-better-bibtex/skin/error-report.css" type="text/css"?>
| <!DOCTYPE window SYSTEM "chrome://zotero-better-bibtex/locale/zotero-better-bibtex.dtd">
overlay#zotero-better-bibtex-preferences(xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:bbt="http://retorque.re/zotero-better-bibtex/")
  prefwindow#zotero-prefs
    include Preferences/prefpane.pug
  // http://udn.realityripple.com/docs/Archive/Mozilla/XUL/prefpane, "using multiple prefpanes"... ugh
  script.
    function showBackup() {
      const citekey = document.getElementById('id-better-bibtex-preferences-citekeyFormat')
      const backup = document.getElementById('id-better-bibtex-preferences-citekeyFormatBackup')
      const label = document.getElementById('id-better-bibtex-label-citekeyFormatBackup')
      Zotero.debug('backup citekey pattern: ' + backup.value)
      backup.hidden = label.hidden = !backup.value || (citekey.value === backup.value)
    }
    const observer = {}
    window.addEventListener('load', function() {
      observer.citekey = Zotero.Prefs.registerObserver('translators.better-bibtex.citekeyFormat', showNew)
      showNew()
      observer.backup = Zotero.Prefs.registerObserver('translators.better-bibtex.citekeyFormatBackup', showBackup)
      showBackup()
    })
    window.addEventListener('unload', function() {
      if (observer.citekey) Zotero.Prefs.unregisterObserver(observer.citekey)
      if (observer.backup) Zotero.Prefs.unregisterObserver(observer.backup)
    })
    function showNew() {
      const citekey = document.getElementById('id-better-bibtex-preferences-citekeyFormat')
      const converted = document.getElementById('id-better-bibtex-preferences-citekeyFormatNew')
      const label = document.getElementById('id-better-bibtex-label-citekeyFormatNew')

      converted.value = ''
      if (citekey.value) {
        try {
          if (citekey.value.startsWith('[')) {
            converted.value = Zotero.BetterBibTeX.KeyManager.convertLegacy(citekey.value)
          }
        }
        catch (err) {
          Zotero.debug('could not convert citekey pattern: ' + err.message)
          converted.value = ''
        }
      }
      converted.hidden = label.hidden = !converted.value
      Zotero.debug('converted citekey pattern: ' + converted.value)
      showBackup()
    }

    Zotero.debug('BBT: overlay PrefPane')
    Zotero.BetterBibTeX.PrefPane.globals = Zotero.BetterBibTeX.PrefPane.autoexport.globals = Function('return this')();
    async function load() {
      try {
        Zotero.debug('BBT: loading PrefPane')
        await Zotero.BetterBibTeX.PrefPane.load()
        showNew()
        showBackup()
        Zotero.debug('BBT: PrefPane loaded')
      } catch (err) {
        Zotero.debug(`BBT: loading PrefPane error: ${err.message}\n${err.stack ||''}`)
      }
    }
