diff --git a/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js b/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
index 04bfdcd..ce1a345 100644
--- a/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
+++ b/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
@@ -36,26 +36,29 @@ BrowserDictionaryLoader.prototype = Object.create(DictionaryLoader.prototype);
  * @param {string} url Dictionary URL
  * @param {BrowserDictionaryLoader~onLoad} callback Callback function
  */
-BrowserDictionaryLoader.prototype.loadArrayBuffer = function (url, callback) {
-    var xhr = new XMLHttpRequest();
-    xhr.open("GET", url, true);
-    xhr.responseType = "arraybuffer";
-    xhr.onload = function () {
-        if (this.status > 0 && this.status !== 200) {
-            callback(xhr.statusText, null);
-            return;
+BrowserDictionaryLoader.prototype.loadArrayBuffer = async function (url, callback) {
+    Zotero.debug(`BrowserDictionaryLoader.loadArrayBuffer: ${url}`)
+
+    try {
+        const response = await fetch(url)
+
+        if (!response.ok) {
+            callback(new Error(`Fetch on ${url} failed: ${response.status}`), null)
+            return
         }
-        var arraybuffer = this.response;
 
-        var gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer));
-        var typed_array = gz.decompress();
-        callback(null, typed_array.buffer);
-    };
-    xhr.onerror = function (err) {
-        callback(err, null);
-    };
-    xhr.send();
-};
+        const arraybuffer = await response.arrayBuffer()
+
+        var gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer))
+        var typed_array = gz.decompress()
+        
+        callback(null, typed_array.buffer)
+    }
+    catch (err) {
+        Zotero.logError(`Fetch failed for ${url}: ${err}`)
+        callback(err, null)
+    }
+}
 
 /**
  * Callback
diff --git a/node_modules/kuromoji/src/loader/NodeDictionaryLoader.js b/node_modules/kuromoji/src/loader/NodeDictionaryLoader.js
index 26eb792..c03c6f2 100644
--- a/node_modules/kuromoji/src/loader/NodeDictionaryLoader.js
+++ b/node_modules/kuromoji/src/loader/NodeDictionaryLoader.js
@@ -37,20 +37,30 @@ NodeDictionaryLoader.prototype = Object.create(DictionaryLoader.prototype);
  * @param {string} file Dictionary file path
  * @param {NodeDictionaryLoader~onLoad} callback Callback function
  */
-NodeDictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {
-    fs.readFile(file, function (err, buffer) {
-        if(err) {
-            return callback(err);
+NodeDictionaryLoader.prototype.loadArrayBuffer = async function (file, callback) {
+    const url = file
+    Zotero.debug(`NodeDictionaryLoader.loadArrayBuffer: ${url}`)
+
+    try {
+        const response = await fetch(url)
+
+        if (!response.ok) {
+            callback(new Error(`Fetch on ${url} failed: ${response.status}`), null)
+            return
         }
-        node_zlib.gunzip(buffer, function (err2, decompressed) {
-            if(err2) {
-                return callback(err2);
-            }
-            var typed_array = new Uint8Array(decompressed);
-            callback(null, typed_array.buffer);
-        });
-    });
-};
+
+        const arraybuffer = await response.arrayBuffer()
+
+        var gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer))
+        var typed_array = gz.decompress()
+
+        callback(null, typed_array.buffer)
+    }
+    catch (err) {
+        Zotero.logError(`Fetch failed for ${url}: ${err}`)
+        callback(err, null)
+    }
+}
 
 /**
  * @callback NodeDictionaryLoader~onLoad
