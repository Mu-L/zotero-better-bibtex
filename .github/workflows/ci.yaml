name: automated tests

on:
  push: null
  pull_request: null
  schedule:
  - cron: 0 0 * * *

env:
  DURATIONS: logs/stats/durations.json
  BINS: logs/stats/bins.json

jobs:
  balance:
    outputs:
      bins: ${{ env.test_bins }}
      clients: ${{ env.test_clients }}
      slow: ${{ env.test_slow }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - run: pip install munch binpacking
    - name: get package version
      run: echo "version="`jq -r .version package.json` >> $GITHUB_ENV
    - name: set slow and beta flags
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: ./util/action-flags


    - name: get previous test durations
      run: curl -L 
        https://github.com/retorquere/zotero-better-bibtex/releases/download/builds/`basename
        $DURATIONS` --create-dirs -o $DURATIONS

    - name: balance tests
      id: balance
      run: ./util/balance.py --durations $DURATIONS --bins $BINS --minutes 10 ${{
        env.slow }} ${{ env.beta }}

    - name: show logs
      run: find logs -type f
    - name: store test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          logs/
          minitests/

  site:
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref,
      'refs/tags/')) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        submodules: true  # Fetch Hugo themes (true OR recursive)
        fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
    - name: get package version
      run: echo "version="`jq -r .version package.json` >> $GITHUB_ENV
    - name: cancel spurious build on tagged version
      uses: andymckay/cancel-action@master
      if: github.event.head_commit.message == env.version && !startsWith(github.ref,
        'refs/tags/')

    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: install node
      uses: actions/setup-node@v4
      with:
        node-version: 19.x
    - name: Cache python/node dependencies
      id: cache
      uses: actions/cache@v4
      env:
        cache-name: v3
      with:
        path: |
          ~/.npm
          ~/.nocache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-build-${{ env.pythonLocation }}-${{ env.cache-name }}-${{
          hashFiles('package-lock.json') }}-${{ hashFiles('requirements.txt') }}
    - name: install python packages
      run: |
        python -m pip install --upgrade pip
        pip install packaging xvfbwrapper
        pip install -r requirements.txt
    - name: install node packages
      run: npm install
    - uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: latest
        extended: true
    - run: npm run docs:deploy
    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site/public

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        submodules: true  # Fetch Hugo themes (true OR recursive)
        fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
    - name: get package version
      run: echo "version="`jq -r .version package.json` >> $GITHUB_ENV
    - name: cancel spurious build on tagged version
      uses: andymckay/cancel-action@master
      if: github.event.head_commit.message == env.version && !startsWith(github.ref,
        'refs/tags/')

    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: install node
      uses: actions/setup-node@v4
      with:
        node-version: 19.x
    - name: Cache python/node dependencies
      id: cache
      uses: actions/cache@v4
      env:
        cache-name: v3
      with:
        path: |
          ~/.npm
          ~/.nocache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-build-${{ env.pythonLocation }}-${{ env.cache-name }}-${{
          hashFiles('package-lock.json') }}-${{ hashFiles('requirements.txt') }}
    - name: install python packages
      run: |
        python -m pip install --upgrade pip
        pip install packaging xvfbwrapper
        pip install -r requirements.txt
    - name: install node packages
      run: npm install
    - name: set slow and beta flags
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: ./util/action-flags


    - run: npm run build ${{ env.beta }}

    - name: store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          xpi/
          gen/

  test:
    needs:
    - build
    - balance
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        bin: ${{ fromJSON(needs.balance.outputs.bins) }}
        client: ${{ fromJSON(needs.balance.outputs.clients) }}
        worker: [--worker, --no-worker]
        exclude:
        - client: jurism-beta
        - client: jurism
          #  worker: '--worker'
    steps:
    - uses: actions/checkout@v4
    - name: fetch build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
  # dummy directory minitests because otherwise dir structure is not maintained?!
    - name: fetch test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-artifacts
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Cache python/node dependencies
      id: cache
      uses: actions/cache@v4
      env:
        cache-name: v3
      with:
        path: |
          ~/.npm
          ~/.nocache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-build-${{ env.pythonLocation }}-${{ env.cache-name }}-${{
          hashFiles('package-lock.json') }}-${{ hashFiles('requirements.txt') }}
    - name: install python packages
      run: |
        python -m pip install --upgrade pip
        pip install packaging xvfbwrapper
        pip install -r requirements.txt

    - name: install ${{ matrix.client }}
      run: |
        curl -sL https://raw.githubusercontent.com/retorquere/zotero-deb/master/install.sh | sudo bash
        sudo apt-get update
        sudo apt-get install ${{ matrix.client }}
        sudo apt-get install mesa-utils libegl1-mesa xvfb
        curl -LO https://github.com/jgm/pandoc/releases/download/3.1.11.1/pandoc-3.1.11.1-linux-amd64.tar.gz
        tar xvzf pandoc-3.1.11.1-linux-amd64.tar.gz
        sudo mv pandoc-3.1.11.1/bin/pandoc /usr/bin
        pandoc -v

    # needs logs/logs to have them show up as logs in the artifact... no idea why
    - name: Run tests
      # continue-on-error: ${{ matrix.client == 'jurism' }}
      run: ./test/behave --client ${{ matrix.client }} ${{ matrix.worker }} --format
        ci --bin ${{ matrix.bin }} --bins $BINS --durations logs/stats/durations--${{
        matrix.client }}--${{ matrix.bin }}${{ matrix.worker }}.json ${{ needs.balance.outputs.slow
        }}
      env:
        PYTHONUNBUFFERED: true

    - uses: actions/upload-artifact@v4
      if: ${{ failure() || cancelled() }}
      with:
        name: debug log ${{ matrix.client }} ${{ matrix.bin }}
        path: ~/.BBTTEST.log

    - name: show logs
      run: find logs -type f
    - name: store test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          logs/
          minitests/

#    - name: Setup tmate session
#      if: ${{ failure() }}
#      uses: mxschmitt/action-tmate@v3
#      with:
#        limit-access-to-actor: true

  release:
    if: github.event_name != 'schedule'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: fetch build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
  # dummy directory minitests because otherwise dir structure is not maintained?!
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: install node
      uses: actions/setup-node@v4
      with:
        node-version: 19.x
    - name: Cache python/node dependencies
      id: cache
      uses: actions/cache@v4
      env:
        cache-name: v3
      with:
        path: |
          ~/.npm
          ~/.nocache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-build-${{ env.pythonLocation }}-${{ env.cache-name }}-${{
          hashFiles('package-lock.json') }}-${{ hashFiles('requirements.txt') }}
    - name: install python packages
      run: |
        python -m pip install --upgrade pip
        pip install packaging xvfbwrapper
        pip install -r requirements.txt
    - name: install node packages
      run: npm install

    - run: npm run release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          if (process.env.XPI_RELEASED) {
            github.rest.issues.addLabels({
              issue_number: parseInt(process.env.XPI_RELEASED),
              owner: 'retorquere',
              repo: 'zotero-better-bibtex',
              labels: ['awaiting-user-feedback'],
            })
          }

  durations:
    if: github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: fetch test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-artifacts
    - name: rebalance tests
      run: ./util/merge-durations.py --client zotero --output $DURATIONS logs/stats/durations--*.json
    - name: Store build stats
      run: |
        gh release upload builds $DURATIONS --clobber --repo ${{ github.repository }}
      env:
        GH_TOKEN: ${{ github.token }}
